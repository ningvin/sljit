"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[416],{3754:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"tutorial/calling-external-functions","title":"Calling External Functions","description":"To call an external function from JIT-ed code, simply invoke sljitemiticall and specify SLJIT_CALL, which represents the platform\'s default C calling convention. There are other calling conventions available as well for more advanced use cases.","source":"@site/../tutorial/04-calling-external-functions.md","sourceDirName":"tutorial","slug":"/tutorial/calling-external-functions","permalink":"/sljit/docs/tutorial/calling-external-functions","draft":false,"unlisted":false,"editUrl":"https://github.com/zherczeg/sljit/docs/docs/../tutorial/04-calling-external-functions.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Branching","permalink":"/sljit/docs/tutorial/branching"},"next":{"title":"Accessing Structures","permalink":"/sljit/docs/tutorial/accessing-structures"}}');var i=t(4848),l=t(8453);const c={},r="Calling External Functions",o={},a=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"calling-external-functions",children:"Calling External Functions"})}),"\n",(0,i.jsxs)(n.p,{children:["To call an external function from JIT-ed code, simply invoke ",(0,i.jsx)(n.code,{children:"sljit_emit_icall"})," and specify ",(0,i.jsx)(n.code,{children:"SLJIT_CALL"}),", which represents the platform's default C calling convention. There are other calling conventions available as well for more advanced use cases."]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to ",(0,i.jsx)(n.code,{children:"sljit_emit_enter"}),", ",(0,i.jsx)(n.code,{children:"sljit_emit_icall"})," requires knowledge about the target function's signature. So, to call a function that takes an ",(0,i.jsx)(n.code,{children:"sljit_sw"})," as its sole argument and returns an ",(0,i.jsx)(n.code,{children:"sljit_sw"}),", you would specify its signature with ",(0,i.jsx)(n.code,{children:"SLJIT_ARGS1(W, W)"}),". Integer arguments are passed in registers ",(0,i.jsx)(n.code,{children:"R0"}),", ",(0,i.jsx)(n.code,{children:"R1"})," and ",(0,i.jsx)(n.code,{children:"R2"})," and the result (if present) is returned in ",(0,i.jsx)(n.code,{children:"R0"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To point SLJIT to the function you want to call, you can use ",(0,i.jsx)(n.code,{children:"SLJIT_FUNC_ADDR"})," to pass its address as an immediate value."]}),"\n",(0,i.jsxs)(n.p,{children:["So, to call a function ",(0,i.jsx)(n.code,{children:"sljit_sw print_num(sljit_sw a)"}),", passing the value in ",(0,i.jsx)(n.code,{children:"S2"}),", you could do the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"/* R0 = S2 */\nsljit_emit_op1(C, SLJIT_MOV, SLJIT_R0, 0, SLJIT_S2, 0);\n/* print_num(R0) */\nsljit_emit_icall(C, SLJIT_CALL, SLJIT_ARGS1(W, W), SLJIT_IMM, SLJIT_FUNC_ADDR(print_num));\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["The complete source code of the example can be found ",(0,i.jsx)(n.a,{href:"https://github.com/zherczeg/sljit/blob/master/docs/tutorial/sources/func_call.c",children:"here"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(6540);const i={},l=s.createContext(i);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);