"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[181],{4828:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorial/accessing-structures","title":"Accessing Structures","description":"While SLJIT does not support record types (structs and classes) directly, it is still very easy to work with them. Assuming you have in S0 the address to a struct point defined as follows:","source":"@site/../tutorial/05-accessing-structures.md","sourceDirName":"tutorial","slug":"/tutorial/accessing-structures","permalink":"/sljit/docs/tutorial/accessing-structures","draft":false,"unlisted":false,"editUrl":"https://github.com/zherczeg/sljit/docs/docs/../tutorial/05-accessing-structures.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Calling External Functions","permalink":"/sljit/docs/tutorial/calling-external-functions"},"next":{"title":"Accessing Arrays","permalink":"/sljit/docs/tutorial/accessing-arrays"}}');var c=t(4848),r=t(8453);const i={},o="Accessing Structures",a={},l=[];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.header,{children:(0,c.jsx)(s.h1,{id:"accessing-structures",children:"Accessing Structures"})}),"\n",(0,c.jsxs)(s.p,{children:["While SLJIT does not support record types (structs and classes) directly, it is still very easy to work with them. Assuming you have in ",(0,c.jsx)(s.code,{children:"S0"})," the address to a ",(0,c.jsx)(s.code,{children:"struct point"})," defined as follows:"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-c",children:"struct point_st {\n\tsljit_sw x;\n\tsljit_s32 y;\n\tsljit_s16 z;\n\tsljit_s8 d;\n};\n"})}),"\n",(0,c.jsxs)(s.p,{children:["To move member ",(0,c.jsx)(s.code,{children:"y"})," into ",(0,c.jsx)(s.code,{children:"R0"}),", you can use the ",(0,c.jsx)(s.code,{children:"SLJIT_MEM1"})," addressing mode, which allows us to specify an offset. To obtain the offset of ",(0,c.jsx)(s.code,{children:"y"})," in ",(0,c.jsx)(s.code,{children:"point_st"}),", you can use the handy ",(0,c.jsx)(s.code,{children:"SLJIT_OFFSETOF"})," macro like so:"]}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-c",children:"sljit_emit_op1(C, SLJIT_MOV_S32, SLJIT_R0, 0, SLJIT_MEM1(SLJIT_S0), SLJIT_OFFSETOF(struct point_st, y));\n"})}),"\n",(0,c.jsxs)(s.p,{children:["And always keep in mind to use the correctly typed variant of ",(0,c.jsx)(s.code,{children:"SLJIT_MOV"}),"!"]}),"\n",(0,c.jsx)(s.p,{children:(0,c.jsxs)(s.em,{children:["The complete source code of the example can be found ",(0,c.jsx)(s.a,{href:"https://github.com/zherczeg/sljit/blob/master/docs/tutorial/sources/struct_access.c",children:"here"}),"."]})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var n=t(6540);const c={},r=n.createContext(c);function i(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);